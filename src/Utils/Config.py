import numpy as np
#import tensorflow as tf

class Config:
    """
    A class that defines data-related constants and configuration options for regression models.

    Attributes
    ----------
    Folder_data : str
        Folder path for data.
    Folder_logs : str
        Folder path for logs.
    Folder_images : str
        Folder path for images.
    Folder_3D_matrix_4 : str
        Folder path for 3D matrix images with size 4.
    Folder_3D_matrix_8 : str
        Folder path for 3D matrix images with size 8.
    Folder_3D_matrix_16 : str
        Folder path for 3D matrix images with size 16.
    Folder_3D_matrix_32 : str
        Folder path for 3D matrix images with size 32.
    Folder_3D_matrix_64 : str
        Folder path for 3D matrix images with size 32.
    Folder_3D_matrix_128 : str
        Folder path for 3D matrix images with size 128.
    Folder_3D_matrix_256 : str
        Folder path for 3D matrix images with size 128.
    Octovoxel_size : int
        The size of octovoxel.
    Bitquads_size : int
        The size of bitquads.
    Byte_binary : str
        Binary string representing the size of Octo-Voxel.
    Nibble_binary : str
        Binary string representing the size of Bit-Quads.
    _INPUT_2D_ : np.ndarray
        2D array representing the Bit-Quads truth table.
    _OUTPUT_2D_4_ : np.ndarray
        1D array representing the output for Bit-Quads connectivity 4.
    _OUTPUT_2D_8_ : np.ndarray
        1D array representing the output for Bit-Quads connectivity 8.
    _INPUT_3D_ : np.ndarray
        2D array representing the truth table for training in 3D.

    Notes
    -----
    The attributes Folder_3D_matrix_64 and Folder_3D_matrix_256 have the same folder path 
    as Folder_3D_matrix_32 and Folder_3D_matrix_128, respectively. Please ensure this is 
    intended.
    """

    #=======================================================================================#
    # * Folders used
    Folder_data = r"src\Data";
    Folder_logs = r"src\Data\logs";
    Folder_images = r"src\Data\Images";
    #=======================================================================================#
    # * Folders used voxel generation
    Folder_3D_matrix_4 = r"src\Data\Images_4_3D";
    Folder_3D_matrix_8 = r"src\Data\Images_8_3D";
    Folder_3D_matrix_16 = r"src\Data\Images_16_3D";
    Folder_3D_matrix_32 = r"src\Data\Images_32_3D";
    Folder_3D_matrix_64 = r"src\Data\Images_64_3D";
    Folder_3D_matrix_128 = r"src\Data\Images_128_3D";
    Folder_3D_matrix_256 = r"src\Data\Images_128_3D";

    #=======================================================================================#
    # * Set the size of octovoxel and calculate the combinations.
    Octovoxel_size = 2;
    #=======================================================================================#
    # * Set the size of octovoxel and calculate the combinations.
    Bitquads_size = 2;
    #=======================================================================================#
    # * Set the size of Octo-Voxel and calculate the combinations.
    Byte_binary = '100000000';
    # * Set the size of Bit-Quads and calculate the combinations.
    Nibble_binary = '10000';
    #=======================================================================================#
    # * Bit-Quads truth table
    _INPUT_2D_ = np.array([     [0, 0, 0, 0],
                                [0, 0, 0, 1],
                                [0, 0, 1, 0],
                                [0, 0, 1, 1],
                                [0, 1, 0, 0],
                                [0, 1, 0, 1],
                                [0, 1, 1, 0],
                                [0, 1, 1, 1],
                                [1, 0, 0, 0],
                                [1, 0, 0, 1],
                                [1, 0, 1, 0],
                                [1, 0, 1, 1],
                                [1, 1, 0, 0],
                                [1, 1, 0, 1],
                                [1, 1, 1, 0],
                                [1, 1, 1, 1]  ], dtype = int);
    #=======================================================================================#
    # * Bit-Quads connectivy 4
    '''Connectivity_4_1 = np.array([   [ 1,  0],
                                    [ 0,  0]    ], dtype = 'int');

    Connectivity_4_2 = np.array([   [ 1,  1],
                                    [ 1,  0]    ], dtype = 'int');

    Connectivity_4_3 = np.array([   [ 1,  0],
                                    [ 0,  1]    ], dtype = 'int');'''

    _OUTPUT_2D_4_ = np.array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 0], dtype = int);

    #=======================================================================================#
    # * Bit-Quads connectivy 8
    '''Connectivity_8_1 = np.array([   [ 1,  0],
                                    [ 0,  0]    ], dtype = 'int');

    Connectivity_8_2 = np.array([   [ 1,  1],
                                    [ 1,  0]    ], dtype = 'int');
    Connectivity_8_3 = np.array([   [ 0,  1],
                                    [ 1,  0]    ], dtype = 'int');'''

    _OUTPUT_2D_8_ = np.array([0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 0, -1, 0], dtype = int);
    #=======================================================================================#
    # * Truth table for training
    _INPUT_3D_ = np.array([ [0, 0, 0, 0, 0, 0, 0, 0],
                        [0, 0, 0, 0, 0, 0, 0, 1],
                        [0, 0, 0, 0, 0, 0, 1, 0],
                        [0, 0, 0, 0, 0, 0, 1, 1],
                        [0, 0, 0, 0, 0, 1, 0, 0],
                        [0, 0, 0, 0, 0, 1, 0, 1],
                        [0, 0, 0, 0, 0, 1, 1, 0],
                        [0, 0, 0, 0, 0, 1, 1, 1],
                        [0, 0, 0, 0, 1, 0, 0, 0],
                        [0, 0, 0, 0, 1, 0, 0, 1],
                        [0, 0, 0, 0, 1, 0, 1, 0],
                        [0, 0, 0, 0, 1, 0, 1, 1],
                        [0, 0, 0, 0, 1, 1, 0, 0],
                        [0, 0, 0, 0, 1, 1, 0, 1],
                        [0, 0, 0, 0, 1, 1, 1, 0],
                        [0, 0, 0, 0, 1, 1, 1, 1],
                        [0, 0, 0, 1, 0, 0, 0, 0],
                        [0, 0, 0, 1, 0, 0, 0, 1],
                        [0, 0, 0, 1, 0, 0, 1, 0],
                        [0, 0, 0, 1, 0, 0, 1, 1],
                        [0, 0, 0, 1, 0, 1, 0, 0],
                        [0, 0, 0, 1, 0, 1, 0, 1],
                        [0, 0, 0, 1, 0, 1, 1, 0],
                        [0, 0, 0, 1, 0, 1, 1, 1],
                        [0, 0, 0, 1, 1, 0, 0, 0],
                        [0, 0, 0, 1, 1, 0, 0, 1],
                        [0, 0, 0, 1, 1, 0, 1, 0],
                        [0, 0, 0, 1, 1, 0, 1, 1],
                        [0, 0, 0, 1, 1, 1, 0, 0],
                        [0, 0, 0, 1, 1, 1, 0, 1],
                        [0, 0, 0, 1, 1, 1, 1, 0],
                        [0, 0, 0, 1, 1, 1, 1, 1],
                        [0, 0, 1, 0, 0, 0, 0, 0],
                        [0, 0, 1, 0, 0, 0, 0, 1],
                        [0, 0, 1, 0, 0, 0, 1, 0],
                        [0, 0, 1, 0, 0, 0, 1, 1],
                        [0, 0, 1, 0, 0, 1, 0, 0],
                        [0, 0, 1, 0, 0, 1, 0, 1],
                        [0, 0, 1, 0, 0, 1, 1, 0],
                        [0, 0, 1, 0, 0, 1, 1, 1],
                        [0, 0, 1, 0, 1, 0, 0, 0],
                        [0, 0, 1, 0, 1, 0, 0, 1],
                        [0, 0, 1, 0, 1, 0, 1, 0],
                        [0, 0, 1, 0, 1, 0, 1, 1],
                        [0, 0, 1, 0, 1, 1, 0, 0],
                        [0, 0, 1, 0, 1, 1, 0, 1],
                        [0, 0, 1, 0, 1, 1, 1, 0],
                        [0, 0, 1, 0, 1, 1, 1, 1],
                        [0, 0, 1, 1, 0, 0, 0, 0],
                        [0, 0, 1, 1, 0, 0, 0, 1],
                        [0, 0, 1, 1, 0, 0, 1, 0],
                        [0, 0, 1, 1, 0, 0, 1, 1],
                        [0, 0, 1, 1, 0, 1, 0, 0],
                        [0, 0, 1, 1, 0, 1, 0, 1],
                        [0, 0, 1, 1, 0, 1, 1, 0],
                        [0, 0, 1, 1, 0, 1, 1, 1],
                        [0, 0, 1, 1, 1, 0, 0, 0],
                        [0, 0, 1, 1, 1, 0, 0, 1],
                        [0, 0, 1, 1, 1, 0, 1, 0],
                        [0, 0, 1, 1, 1, 0, 1, 1],
                        [0, 0, 1, 1, 1, 1, 0, 0],
                        [0, 0, 1, 1, 1, 1, 0, 1],
                        [0, 0, 1, 1, 1, 1, 1, 0],
                        [0, 0, 1, 1, 1, 1, 1, 1],
                        [0, 1, 0, 0, 0, 0, 0, 0],
                        [0, 1, 0, 0, 0, 0, 0, 1],
                        [0, 1, 0, 0, 0, 0, 1, 0],
                        [0, 1, 0, 0, 0, 0, 1, 1],
                        [0, 1, 0, 0, 0, 1, 0, 0],
                        [0, 1, 0, 0, 0, 1, 0, 1],
                        [0, 1, 0, 0, 0, 1, 1, 0],
                        [0, 1, 0, 0, 0, 1, 1, 1],
                        [0, 1, 0, 0, 1, 0, 0, 0],
                        [0, 1, 0, 0, 1, 0, 0, 1],
                        [0, 1, 0, 0, 1, 0, 1, 0],
                        [0, 1, 0, 0, 1, 0, 1, 1],
                        [0, 1, 0, 0, 1, 1, 0, 0],
                        [0, 1, 0, 0, 1, 1, 0, 1],
                        [0, 1, 0, 0, 1, 1, 1, 0],
                        [0, 1, 0, 0, 1, 1, 1, 1],
                        [0, 1, 0, 1, 0, 0, 0, 0],
                        [0, 1, 0, 1, 0, 0, 0, 1],
                        [0, 1, 0, 1, 0, 0, 1, 0],
                        [0, 1, 0, 1, 0, 0, 1, 1],
                        [0, 1, 0, 1, 0, 1, 0, 0],
                        [0, 1, 0, 1, 0, 1, 0, 1],
                        [0, 1, 0, 1, 0, 1, 1, 0],
                        [0, 1, 0, 1, 0, 1, 1, 1],
                        [0, 1, 0, 1, 1, 0, 0, 0],
                        [0, 1, 0, 1, 1, 0, 0, 1],
                        [0, 1, 0, 1, 1, 0, 1, 0],
                        [0, 1, 0, 1, 1, 0, 1, 1],
                        [0, 1, 0, 1, 1, 1, 0, 0],
                        [0, 1, 0, 1, 1, 1, 0, 1],
                        [0, 1, 0, 1, 1, 1, 1, 0],
                        [0, 1, 0, 1, 1, 1, 1, 1],
                        [0, 1, 1, 0, 0, 0, 0, 0],
                        [0, 1, 1, 0, 0, 0, 0, 1],
                        [0, 1, 1, 0, 0, 0, 1, 0],
                        [0, 1, 1, 0, 0, 0, 1, 1],
                        [0, 1, 1, 0, 0, 1, 0, 0],
                        [0, 1, 1, 0, 0, 1, 0, 1],
                        [0, 1, 1, 0, 0, 1, 1, 0],
                        [0, 1, 1, 0, 0, 1, 1, 1],
                        [0, 1, 1, 0, 1, 0, 0, 0],
                        [0, 1, 1, 0, 1, 0, 0, 1],
                        [0, 1, 1, 0, 1, 0, 1, 0],
                        [0, 1, 1, 0, 1, 0, 1, 1],
                        [0, 1, 1, 0, 1, 1, 0, 0],
                        [0, 1, 1, 0, 1, 1, 0, 1],
                        [0, 1, 1, 0, 1, 1, 1, 0],
                        [0, 1, 1, 0, 1, 1, 1, 1],
                        [0, 1, 1, 1, 0, 0, 0, 0],
                        [0, 1, 1, 1, 0, 0, 0, 1],
                        [0, 1, 1, 1, 0, 0, 1, 0],
                        [0, 1, 1, 1, 0, 0, 1, 1],
                        [0, 1, 1, 1, 0, 1, 0, 0],
                        [0, 1, 1, 1, 0, 1, 0, 1],
                        [0, 1, 1, 1, 0, 1, 1, 0],
                        [0, 1, 1, 1, 0, 1, 1, 1],
                        [0, 1, 1, 1, 1, 0, 0, 0],
                        [0, 1, 1, 1, 1, 0, 0, 1],
                        [0, 1, 1, 1, 1, 0, 1, 0],
                        [0, 1, 1, 1, 1, 0, 1, 1],
                        [0, 1, 1, 1, 1, 1, 0, 0],
                        [0, 1, 1, 1, 1, 1, 0, 1],
                        [0, 1, 1, 1, 1, 1, 1, 0],
                        [0, 1, 1, 1, 1, 1, 1, 1],
                        [1, 0, 0, 0, 0, 0, 0, 0],
                        [1, 0, 0, 0, 0, 0, 0, 1],
                        [1, 0, 0, 0, 0, 0, 1, 0],
                        [1, 0, 0, 0, 0, 0, 1, 1],
                        [1, 0, 0, 0, 0, 1, 0, 0],
                        [1, 0, 0, 0, 0, 1, 0, 1],
                        [1, 0, 0, 0, 0, 1, 1, 0],
                        [1, 0, 0, 0, 0, 1, 1, 1],
                        [1, 0, 0, 0, 1, 0, 0, 0],
                        [1, 0, 0, 0, 1, 0, 0, 1],
                        [1, 0, 0, 0, 1, 0, 1, 0],
                        [1, 0, 0, 0, 1, 0, 1, 1],
                        [1, 0, 0, 0, 1, 1, 0, 0],
                        [1, 0, 0, 0, 1, 1, 0, 1],
                        [1, 0, 0, 0, 1, 1, 1, 0],
                        [1, 0, 0, 0, 1, 1, 1, 1],
                        [1, 0, 0, 1, 0, 0, 0, 0],
                        [1, 0, 0, 1, 0, 0, 0, 1],
                        [1, 0, 0, 1, 0, 0, 1, 0],
                        [1, 0, 0, 1, 0, 0, 1, 1],
                        [1, 0, 0, 1, 0, 1, 0, 0],
                        [1, 0, 0, 1, 0, 1, 0, 1],
                        [1, 0, 0, 1, 0, 1, 1, 0],
                        [1, 0, 0, 1, 0, 1, 1, 1],
                        [1, 0, 0, 1, 1, 0, 0, 0],
                        [1, 0, 0, 1, 1, 0, 0, 1],
                        [1, 0, 0, 1, 1, 0, 1, 0],
                        [1, 0, 0, 1, 1, 0, 1, 1],
                        [1, 0, 0, 1, 1, 1, 0, 0],
                        [1, 0, 0, 1, 1, 1, 0, 1],
                        [1, 0, 0, 1, 1, 1, 1, 0],
                        [1, 0, 0, 1, 1, 1, 1, 1],
                        [1, 0, 1, 0, 0, 0, 0, 0],
                        [1, 0, 1, 0, 0, 0, 0, 1],
                        [1, 0, 1, 0, 0, 0, 1, 0],
                        [1, 0, 1, 0, 0, 0, 1, 1],
                        [1, 0, 1, 0, 0, 1, 0, 0],
                        [1, 0, 1, 0, 0, 1, 0, 1],
                        [1, 0, 1, 0, 0, 1, 1, 0],
                        [1, 0, 1, 0, 0, 1, 1, 1],
                        [1, 0, 1, 0, 1, 0, 0, 0],
                        [1, 0, 1, 0, 1, 0, 0, 1],
                        [1, 0, 1, 0, 1, 0, 1, 0],
                        [1, 0, 1, 0, 1, 0, 1, 1],
                        [1, 0, 1, 0, 1, 1, 0, 0],
                        [1, 0, 1, 0, 1, 1, 0, 1],
                        [1, 0, 1, 0, 1, 1, 1, 0],
                        [1, 0, 1, 0, 1, 1, 1, 1],
                        [1, 0, 1, 1, 0, 0, 0, 0],
                        [1, 0, 1, 1, 0, 0, 0, 1],
                        [1, 0, 1, 1, 0, 0, 1, 0],
                        [1, 0, 1, 1, 0, 0, 1, 1],
                        [1, 0, 1, 1, 0, 1, 0, 0],
                        [1, 0, 1, 1, 0, 1, 0, 1],
                        [1, 0, 1, 1, 0, 1, 1, 0],
                        [1, 0, 1, 1, 0, 1, 1, 1],
                        [1, 0, 1, 1, 1, 0, 0, 0],
                        [1, 0, 1, 1, 1, 0, 0, 1],
                        [1, 0, 1, 1, 1, 0, 1, 0],
                        [1, 0, 1, 1, 1, 0, 1, 1],
                        [1, 0, 1, 1, 1, 1, 0, 0],
                        [1, 0, 1, 1, 1, 1, 0, 1],
                        [1, 0, 1, 1, 1, 1, 1, 0],
                        [1, 0, 1, 1, 1, 1, 1, 1],
                        [1, 1, 0, 0, 0, 0, 0, 0],
                        [1, 1, 0, 0, 0, 0, 0, 1],
                        [1, 1, 0, 0, 0, 0, 1, 0],
                        [1, 1, 0, 0, 0, 0, 1, 1],
                        [1, 1, 0, 0, 0, 1, 0, 0],
                        [1, 1, 0, 0, 0, 1, 0, 1],
                        [1, 1, 0, 0, 0, 1, 1, 0],
                        [1, 1, 0, 0, 0, 1, 1, 1],
                        [1, 1, 0, 0, 1, 0, 0, 0],
                        [1, 1, 0, 0, 1, 0, 0, 1],
                        [1, 1, 0, 0, 1, 0, 1, 0],
                        [1, 1, 0, 0, 1, 0, 1, 1],
                        [1, 1, 0, 0, 1, 1, 0, 0],
                        [1, 1, 0, 0, 1, 1, 0, 1],
                        [1, 1, 0, 0, 1, 1, 1, 0],
                        [1, 1, 0, 0, 1, 1, 1, 1],
                        [1, 1, 0, 1, 0, 0, 0, 0],
                        [1, 1, 0, 1, 0, 0, 0, 1],
                        [1, 1, 0, 1, 0, 0, 1, 0],
                        [1, 1, 0, 1, 0, 0, 1, 1],
                        [1, 1, 0, 1, 0, 1, 0, 0],
                        [1, 1, 0, 1, 0, 1, 0, 1],
                        [1, 1, 0, 1, 0, 1, 1, 0],
                        [1, 1, 0, 1, 0, 1, 1, 1],
                        [1, 1, 0, 1, 1, 0, 0, 0],
                        [1, 1, 0, 1, 1, 0, 0, 1],
                        [1, 1, 0, 1, 1, 0, 1, 0],
                        [1, 1, 0, 1, 1, 0, 1, 1],
                        [1, 1, 0, 1, 1, 1, 0, 0],
                        [1, 1, 0, 1, 1, 1, 0, 1],
                        [1, 1, 0, 1, 1, 1, 1, 0],
                        [1, 1, 0, 1, 1, 1, 1, 1],
                        [1, 1, 1, 0, 0, 0, 0, 0],
                        [1, 1, 1, 0, 0, 0, 0, 1],
                        [1, 1, 1, 0, 0, 0, 1, 0],
                        [1, 1, 1, 0, 0, 0, 1, 1],
                        [1, 1, 1, 0, 0, 1, 0, 0],
                        [1, 1, 1, 0, 0, 1, 0, 1],
                        [1, 1, 1, 0, 0, 1, 1, 0],
                        [1, 1, 1, 0, 0, 1, 1, 1],
                        [1, 1, 1, 0, 1, 0, 0, 0],
                        [1, 1, 1, 0, 1, 0, 0, 1],
                        [1, 1, 1, 0, 1, 0, 1, 0],
                        [1, 1, 1, 0, 1, 0, 1, 1],
                        [1, 1, 1, 0, 1, 1, 0, 0],
                        [1, 1, 1, 0, 1, 1, 0, 1],
                        [1, 1, 1, 0, 1, 1, 1, 0],
                        [1, 1, 1, 0, 1, 1, 1, 1],
                        [1, 1, 1, 1, 0, 0, 0, 0],
                        [1, 1, 1, 1, 0, 0, 0, 1],
                        [1, 1, 1, 1, 0, 0, 1, 0],
                        [1, 1, 1, 1, 0, 0, 1, 1],
                        [1, 1, 1, 1, 0, 1, 0, 0],
                        [1, 1, 1, 1, 0, 1, 0, 1],
                        [1, 1, 1, 1, 0, 1, 1, 0],
                        [1, 1, 1, 1, 0, 1, 1, 1],
                        [1, 1, 1, 1, 1, 0, 0, 0],
                        [1, 1, 1, 1, 1, 0, 0, 1],
                        [1, 1, 1, 1, 1, 0, 1, 0],
                        [1, 1, 1, 1, 1, 0, 1, 1],
                        [1, 1, 1, 1, 1, 1, 0, 0],
                        [1, 1, 1, 1, 1, 1, 0, 1],
                        [1, 1, 1, 1, 1, 1, 1, 0],
                        [1, 1, 1, 1, 1, 1, 1, 1] ], dtype = int);
    
    #=======================================================================================#
    # * Euler Y
    _OUTPUT_3D_ = np.array([0,  0,  1,  0,  0,  0,  0,  0,  0, -1,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
                           -1, -1, -1, -1,  0,  0,  0,  0,  0, -1,  0, -1, -1, -1, -1, -1, -1, -2, -1, -2, -1, -1, -1, -1, 
                            0,  0,  0,  0,  0,  0,  0,  0, -1, -1, -1, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
                            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
                            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
                            0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0, -1,  0,  0,  0,  0,  0, -1,  0, -1,  0,  0,  0,  0, 
                            0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1,  0, -1,  0, -1,  0,  0,  0,  0, 
                            0, -1,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  0,  0,  0,  0,  1,  1,  1,  1, 
                            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
                            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
                            0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],  dtype = int);
#=======================================================================================#